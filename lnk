#!/usr/bin/env bash
#
# Script to manage links.
# You need github.com/junegunn/fzf to use this script.
#
# To list available commands, type 'lnk help'.


if [ -z "$XDG_DATA_HOME" ]; then
    PREFIX="$HOME/.link-store"
else
    PREFIX="$XDG_DATA_HOME/link-store"
fi

STORAGE="${PREFIX}/links.tsv"

if [ "$(uname)" == "Darwin" ]; then
    GETOPT="$({ test -x /usr/local/opt/gnu-getopt/bin/getopt && echo /usr/local/opt/gnu-getopt; } || brew --prefix gnu-getopt 2>/dev/null || { command -v port &>/dev/null && echo /opt/local; } || echo /usr/local)/bin/getopt"
else
    GETOPT="$(command -v getopt)"
fi

cmd_usage() {
    cat <<-_EOF
Usage:
    $PROGRAM init
        Initialize the link store.
    $PROGRAM insert link-address
        Insert a new link.
    $PROGRAM find [--no-browser,-n]
        Launches FZF to search for a link and open it in the browser.
        If --no-browser is specified, the link is just copied to the clipboard.
    $PROGRAM git git-command-args...
        Execute a git command specified by git-command-args, e.g. '$PROGRAM git push'
    $PROGRAM update
        Update the script itself from source.
    $PROGRAM help
        Show this text.
_EOF
}

die() {
    echo "$@" >&2
    exit 1
}

if_initialized() {
    git -C "$PREFIX" rev-parse --is-inside-work-tree > /dev/null 2>&1 ||
    die "Git repository not initialized in $PREFIX. Run '$PROGRAM init' first."
}

git_add_commit() {
    git -C "$PREFIX" add $(basename "$STORAGE")
    git -C "$PREFIX" commit -m "$1"
}

cmd_init() {
    [ ! -z "$1" ] && die "Usage: $PROGRAM $COMMAND"

    mkdir -p "$PREFIX"

    if git -C "$PREFIX" rev-parse --is-inside-work-tree > /dev/null 2>&1; then
        echo "Git repository already initialized in $PREFIX"
    else
        git -C "$PREFIX" init
        echo -e "date\ttags\tlink" > "$STORAGE"
        git_add_commit "Initialize link store"
    fi

    command -v fzf > /dev/null 2>&1 || 
        echo "FZF should be installed to use this script. Try 'brew install fzf' or 'apt install fzf'."

    git -C "$PREFIX" ls-remote --exit-code > /dev/null 2>&1 ||
        cat <<-_EOF
If you want to backup your local changes with remote repo:
    1. Create new empty repo 'link-store': https://github.com/new
    2. 'lnk git remote add origin <remote-repo-url>'
    3. 'lnk git push --set-upstream origin $(lnk git branch --show-current)'
    4. When you want to push all changes to remote repo, run: 'lnk git push'
_EOF
}

cmd_git() {
    if_initialized
    git -C "$PREFIX" "$@"
}

cmd_insert() {
    if_initialized
    [ -z "$1" ] || [ ! -z "$2" ] && die "Usage: $PROGRAM $COMMAND link-address"

    local link="$1"
    echo "Adding link: $link"
    local date=$(date +%Y-%m-%d\ %H:%M)
    read -p "Tags (split by space): " tags && tags=$(echo "$tags" | tr -s ' ')

    cat <(head -n 1 "$STORAGE") <(echo -e "$date\t$tags\t$link") <(tail -n +2 "$STORAGE") > "$STORAGE".tmp &&
        mv "$STORAGE".tmp "$STORAGE"

    git_add_commit "Add link $link"
}

cmd_find() {
    if_initialized

    local opts no_browser=0
    opts="$($GETOPT -o n -l no-browser -n "$PROGRAM" -- "$@")"
    local err=$?

    eval set -- "$opts"
    while true; do case $1 in
        -n|--no-browser) no_browser=1; shift ;;
        --) shift; break ;;
    esac done

    [[ ! -z "$1" || $err -ne 0 ]] && die "Usage: $PROGRAM $COMMAND [--no-browser,-n]"

    local link=$(
        cat "$STORAGE" |
        column -s $'\t' -t |
        fzf --reverse --border rounded --header-lines 1 |
        rev | cut -d' ' -f1 | rev
    )
    [ -z "$link" ] && die "No link selected"

    [[ $link == http* ]] || link="http://$link"

    if [ "$(uname)" == "Linux" ]; then
        echo -n "$link" | xclip -selection clipboard
        [ $no_browser -eq 0 ] && xdg-open "$link"
    elif [ "$(uname)" == "Darwin" ]; then
        echo -n "$link" | pbcopy
        [ $no_browser -eq 0 ] && open "$link"
    else
        die "$(uname) is not supported. Link: $link"
    fi

    echo "Copied link to clipboard: $link"
}

cmd_update() {
    [ ! -z "$1" ] && die "Usage: $PROGRAM $COMMAND"

    local source_url=https://raw.githubusercontent.com/SmirnovAlexander/lnk/master/lnk
    local tmpfile=$HOME/lnk.tmp

    wget --no-cache --quiet --output-document=$tmpfile $source_url
    chmod +x $tmpfile
    git diff --exit-code $0 $tmpfile && rm $tmpfile && echo "No changes!" ||
        { sudo mv $tmpfile $0 && echo "Updated!"; }
}


PROGRAM="${0##*/}"
COMMAND="$1"

case "$1" in
    init)        shift; cmd_init "$@" ;;
    insert|add)  shift; cmd_insert "$@" ;;
    find|search) shift; cmd_find "$@" ;;
    git)         shift; cmd_git "$@" ;;
    update)      shift; cmd_update "$@" ;;
    help|--help) shift; cmd_usage "$@" ;;
    *)                  cmd_usage "$@" ;;
esac

exit 0
